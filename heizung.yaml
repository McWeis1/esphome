esphome:
  name: heizung
  friendly_name: Heizung
  includes:
    - wr3223_commands.h
    - wr3223_connector.h
    - wr3223_sensorConnectors.h
    - wr3223_relaisValueDecoder.h
    - wr3223_statusValueHolder.h
    - wr3223_errorValueDecoder.h
    - wr3223_modeValueDecoder.h
    - wr3223_controller.h
  libraries: 
    - EEPROM
  platformio_options: 
    build_flags:
      -fexceptions
    build_unflags:
      -fno-exceptions

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  baud_rate: 0

# Enable Home Assistant API
api:
  encryption:
    key: "e/+++jk8p5jje+3GA6YMj0kZFTOVWIONkdJ6QBXf+Xk="

ota:
  - platform: esphome
    password: "54137a410e3b9d95c539422b5265e969"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Heizung Fallback Hotspot"
    password: "z91mSELtmK0X"

captive_portal:

uart:
  - id: uart_1
    tx_pin: GPIO19
    rx_pin: GPIO18
    baud_rate: 9600
    data_bits: 7
    parity: EVEN
    stop_bits: 1
    #debug:

custom_component:
  - lambda: |-
      auto wr3223 = new WR3223::WR3223Controller(10000, id(uart_1));
      return {wr3223};
    components:
    - id: wr3223Controller

text_sensor:
  - platform: custom    
    id: WR3223TextSensorConnector
    lambda: |-
      auto wr3223Text = new WR3223::WR3223TextSensorConnector();
      App.register_component(wr3223Text);
      return {wr3223Text->errorTextSensor,
              wr3223Text->customTextSensor};
    text_sensors: 
      - name: "FEHLER-Text"
        entity_category: diagnostic
      - name: "Custom-Text"
        entity_category: diagnostic

# das sollte hier genau übereinstimme, die flags des modus passen hier zum index
select:
  - platform: template
    name: "Betriebsmodus"
    id: "select_betriebsmodus"    
    options:             
      - "AUS"       
      - "Sommerbetrieb"
      - "Sommer-Abluftbetrieb"
      - "Winterbetrieb"      
      - "Handbetrieb"          
    lambda: |-
      auto wr3223Ctrl = static_cast<WR3223::WR3223Controller *>(wr3223Controller);
      int modus = wr3223Ctrl->Get_Modus();
      // if (modus == 1)      
      //   id(select_betriebsmodus).set_icon("mdi:white-balance-sunny");
      // else if (modus == 2)
      //   id(select_betriebsmodus).set_icon("mdi:sun-angle-outline");
      // else if (modus == 3)
      //   id(select_betriebsmodus).set_icon("mdi:snowflake");
      // else if (modus == 3)
      //   id(select_betriebsmodus).set_icon("mdi:hand-back-left-outline");
      // else
      //   id(select_betriebsmodus).set_icon("mdi:pump-off");           
      return id(select_betriebsmodus).at(modus);
    set_action: 
      then:
        - lambda: |-
            auto wr3223Ctrl = static_cast<WR3223::WR3223Controller *>(wr3223Controller);
            wr3223Ctrl->Set_Modus(id(select_betriebsmodus).index_of(x));
    update_interval: 60s
    
  - platform: template
    name: "Luftstufe"    
    id: "select_luftstufe"
    icon: mdi:fan
    options:             
      - "AUS"
      - "Luftstufe 1"
      - "Luftstufe 2"
      - "Luftstufe 3"      
    lambda: |-
      auto wr3223Ctrl = static_cast<WR3223::WR3223Controller *>(wr3223Controller);
      int stufe = wr3223Ctrl->Get_Luftstufe();            
      // if (stufe == 1)      
      //   id(select_luftstufe).set_icon("mdi:fan-speed-1");
      // else if (stufe == 2)
      //   id(select_luftstufe).set_icon("mdi:fan-speed-2");
      // else if (stufe == 3)
      //   id(select_luftstufe).set_icon("mdi:fan-speed-3");
      // else
      //   id(select_luftstufe).set_icon("mdi:fan-off");        
      return id(select_luftstufe).at(stufe);
    set_action: 
      then:
        - lambda: |-
            auto wr3223Ctrl = static_cast<WR3223::WR3223Controller *>(wr3223Controller);            
            wr3223Ctrl->Set_Luftstufe(id(select_luftstufe).index_of(x));
    update_interval: 60s

switch:
  - platform: template
    name: "Zusatzheizung"
    device_class: switch
    icon: mdi:heat-wave    
    lambda: 'return static_cast<WR3223::WR3223Controller *>(wr3223Controller)->Get_Zusatzheizung_On();'
    turn_on_action:
      - lambda: 'static_cast<WR3223::WR3223Controller *>(wr3223Controller)->Set_Zusatzheizung_On(true);'
    turn_off_action:
      - lambda: 'static_cast<WR3223::WR3223Controller *>(wr3223Controller)->Set_Zusatzheizung_On(false);'

  - platform: template
    name: "Wärmepumpe"
    id: warmepumpe_an    
    device_class: switch 
    icon: mdi:heat-pump-outline       
    lambda: |-
      bool result = static_cast<WR3223::WR3223Controller *>(wr3223Controller)->Get_Waermepunpe_On();      
      // if (result)      
      //   id(warmepumpe_an).set_icon("mdi:pump");
      // else
      //   id(warmepumpe_an).set_icon("mdi:pump-off");
      return result;
    turn_on_action:
      - lambda: 'static_cast<WR3223::WR3223Controller *>(wr3223Controller)->Set_Waermepunpe_On(true);'
    turn_off_action:
      - lambda: 'static_cast<WR3223::WR3223Controller *>(wr3223Controller)->Set_Waermepunpe_On(false);'

  - platform: template
    name: "Kühlung"    
    id: "kuhlung_an"
    device_class: switch    
    icon: mdi:snowflake    
    lambda: |-
      bool result = static_cast<WR3223::WR3223Controller *>(wr3223Controller)->Get_Kuehlung_On();      
      // if (result)      
      //   id(kuhlung_an).set_icon("mdi:snowflake");
      // else
      //   id(kuhlung_an).set_icon("mdi:snowflake-off");
      return result;
    turn_on_action:
      - lambda: 'static_cast<WR3223::WR3223Controller *>(wr3223Controller)->Set_Kuehlung_On(true);'
    turn_off_action:
      - lambda: 'static_cast<WR3223::WR3223Controller *>(wr3223Controller)->Set_Kuehlung_On(false);'

number:
  - platform: template
    name: "Luftstufe 1 Ventilatorstellwert"
    id: "vent_level_1_speed"
    min_value: 40
    max_value: 100
    step: 1
    entity_category: config
    icon: mdi:fan-speed-1
    unit_of_measurement: "%"    
    update_interval: never
    lambda: 'return static_cast<WR3223::WR3223Controller *>(wr3223Controller)->get_vent_level_speed(1);'
    set_action: 
      then:
        - lambda: 'static_cast<WR3223::WR3223Controller *>(wr3223Controller)->set_vent_level_speed(1, (int)x);'

  - platform: template
    name: "Luftstufe 2 Ventilatorstellwert"
    id: "vent_level_2_speed"
    min_value: 40
    max_value: 100
    step: 1
    entity_category: config
    icon: mdi:fan-speed-2
    unit_of_measurement: "%"
    update_interval: never
    lambda: 'return static_cast<WR3223::WR3223Controller *>(wr3223Controller)->get_vent_level_speed(2);'
    set_action: 
      then:
        - lambda: 'static_cast<WR3223::WR3223Controller *>(wr3223Controller)->set_vent_level_speed(2, (int)x);'

  - platform: template
    name: "Luftstufe 3 Ventilatorstellwert"
    id: "vent_level_3_speed"
    min_value: 40
    max_value: 100
    step: 1
    entity_category: config
    icon: mdi:fan-speed-3
    unit_of_measurement: "%"
    update_interval: never
    lambda: 'return static_cast<WR3223::WR3223Controller *>(wr3223Controller)->get_vent_level_speed(3);'
    set_action: 
      then:
        - lambda: 'static_cast<WR3223::WR3223Controller *>(wr3223Controller)->set_vent_level_speed(3, (int)x);'

  - platform: template
    name: "Zuluft Anpassung"
    id: "zuluft_speed"
    min_value: -20
    max_value: 20
    step: 1
    entity_category: config
    icon: mdi:fan-plus
    unit_of_measurement: "%"
    update_interval: never
    lambda: 'return static_cast<WR3223::WR3223Controller *>(wr3223Controller)->get_zuluft_speed();'
    set_action: 
      then:
        - lambda: 'static_cast<WR3223::WR3223Controller *>(wr3223Controller)->set_zuluft_speed((int)x);'
        
  - platform: template
    name: "Abluft Anpassung"
    id: "abluft_speed"
    min_value: -20
    max_value: 20
    step: 1
    entity_category: config
    icon: mdi:fan-minus
    unit_of_measurement: "%"
    update_interval: never
    lambda: 'return static_cast<WR3223::WR3223Controller *>(wr3223Controller)->get_abluft_speed();'
    set_action: 
      then:
        - lambda: 'static_cast<WR3223::WR3223Controller *>(wr3223Controller)->set_abluft_speed((int)x);'
        
  - platform: template
    name: "ETSommer"
    id: "ETSommer_speed"
    min_value: 15
    max_value: 40
    step: 1
    entity_category: config
    unit_of_measurement: "°C"
    update_interval: never
    lambda: 'return static_cast<WR3223::WR3223Controller *>(wr3223Controller)->get_ETSommer_speed();'
    set_action: 
      then:
        - lambda: 'static_cast<WR3223::WR3223Controller *>(wr3223Controller)->set_ETSommer_speed((int)x);'

  - platform: template
    name: "ETWinter"
    id: "ETWinter_speed"
    min_value: -20
    max_value: 10
    step: 1
    entity_category: config
    unit_of_measurement: "°C"
    update_interval: never
    lambda: 'return static_cast<WR3223::WR3223Controller *>(wr3223Controller)->get_ETWinter_speed();'
    set_action: 
      then:
        - lambda: 'static_cast<WR3223::WR3223Controller *>(wr3223Controller)->set_ETWinter_speed((int)x);'
        
  - platform: template
    name: "StartEWT"
    id: "StartEWT_speed"
    min_value: -3
    max_value: 5
    step: 1
    entity_category: config
    unit_of_measurement: "°C"
    update_interval: never
    lambda: 'return static_cast<WR3223::WR3223Controller *>(wr3223Controller)->get_StartEWT_speed();'
    set_action: 
      then:
        - lambda: 'static_cast<WR3223::WR3223Controller *>(wr3223Controller)->set_StartEWT_speed((int)x);'

  - platform: template
    name: "StopETW"
    id: "StopETW_speed"
    min_value: -5
    max_value: 15
    step: 1
    entity_category: config
    unit_of_measurement: "°C"
    update_interval: never
    lambda: 'return static_cast<WR3223::WR3223Controller *>(wr3223Controller)->get_StopETW_speed();'
    set_action: 
      then:
        - lambda: 'static_cast<WR3223::WR3223Controller *>(wr3223Controller)->set_StopETW_speed((int)x);'

  - platform: template
    name: "Sommerstop"
    id: "Sommerstop_speed"
    min_value: 5
    max_value: 30
    step: 1
    entity_category: config
    unit_of_measurement: "°C"
    update_interval: never
    lambda: 'return static_cast<WR3223::WR3223Controller *>(wr3223Controller)->get_Sommerstop_speed();'
    set_action: 
      then:
        - lambda: 'static_cast<WR3223::WR3223Controller *>(wr3223Controller)->set_Sommerstop_speed((int)x);'        
#       
#  - platform: template
#    name: "ZuluftSoll"
#    id: "ZuluftSoll_speed"
#    min_value: 0
#    max_value: 35
#    step: 1
#    entity_category: config
#    unit_of_measurement: "°C"
#    update_interval: never
#    lambda: 'return static_cast<WR3223::WR3223Controller *>(wr3223Controller)->get_ZuluftSoll_speed();'
#    set_action: 
#      then:
#        - lambda: 'static_cast<WR3223::WR3223Controller *>(wr3223Controller)->set_ZuluftSoll_speed((int)x);'
#       
#  - platform: template
#    name: "ZuluftSollRe"
#    id: "ZuluftSollRe_speed"
#    min_value: 0
#    max_value: 35
#    step: 1
#    entity_category: config
#    unit_of_measurement: "°C"
#    update_interval: never
#    lambda: 'return static_cast<WR3223::WR3223Controller *>(wr3223Controller)->get_ZuluftSollRe_speed();'
#    set_action: 
#      then:
#        - lambda: 'static_cast<WR3223::WR3223Controller *>(wr3223Controller)->set_ZuluftSollRe_speed((int)x);'
#        
#  - platform: template
#    name: "RaumsollRd"
#    id: "RaumsollRd_speed"
#    min_value: 0
#    max_value: 35
#    step: 1
#    entity_category: config
#    unit_of_measurement: "°C"
#    update_interval: never
#    lambda: 'return static_cast<WR3223::WR3223Controller *>(wr3223Controller)->get_RaumsollRd_speed();'
#   set_action: 
#     then:
#        - lambda: 'static_cast<WR3223::WR3223Controller *>(wr3223Controller)->set_RaumsollRd_speed((int)x);'
#        
  - platform: template
    name: "Update Interval"
    min_value: 1
    max_value: 20
    step: 1
    mode: SLIDER
    entity_category: config    
    icon: mdi:refresh-circle
    lambda: 'return (static_cast<WR3223::WR3223Controller *>(wr3223Controller)->get_update_interval() / 1000);'
    set_action: 
      then:
        - lambda: |-
            auto controller = static_cast<WR3223::WR3223Controller *>(wr3223Controller);
            controller->set_update_interval((int)x * 1000);
            controller->call_setup();    
  # - platform: template
  #   name: "Zuluft soll Temperatur"
  #   min_value: 18
  #   max_value: 35
  #   step: 1
  #   mode: SLIDER
  #   entity_category: config    
  #   icon: mdi:home-thermometer-outline
  #   lambda: 'return static_cast<WR3223::WR3223Controller *>(wr3223Controller)->Get_Zuluft_Soll_Temp();'
  #   set_action: 
  #     then:
  #       - lambda: 'static_cast<WR3223::WR3223Controller *>(wr3223Controller)->Set_Zuluft_Soll_Temp(x);'

binary_sensor:
  - platform: custom
    id: WR3223BinarySensorConnector
    lambda: |-
      auto wr3223Binary = new WR3223::WR3223BinarySensorConnector();
      App.register_component(wr3223Binary);
      return {wr3223Binary->kompressorRelaySensor,
              wr3223Binary->zusatzheizungRelaySensor,
              wr3223Binary->erdwaermetauscherRelaySensor,
              wr3223Binary->bypassRelaySensor,
              wr3223Binary->vorheizregisterRelaySensor,
              wr3223Binary->netzrelaisBypassRelaySensor,
              wr3223Binary->bedienteilAktivRelaySensor,
              wr3223Binary->bedienungViaRSSchnittstelleRelaySensor,
              wr3223Binary->luftstufeVorhandenRelaySensor,
              wr3223Binary->wW_NachheizregisterRelaySensor,
              wr3223Binary->magnetventilRelaySensor,
              wr3223Binary->vorheizenAktivRelaySensor,
              wr3223Binary->errorSensor,
              wr3223Binary->nachheizregisterSensor,
              wr3223Binary->absenkungSensor};
    binary_sensors: 
      - name: "Relais: Kompressor"
        entity_category: diagnostic
      - name: "Relais: Zusatzheizung"
        entity_category: diagnostic
      - name: "Relais: Erdwaermetauscher"
        entity_category: diagnostic
      - name: "Relais: Bypass"
        entity_category: diagnostic
      - name: "Relais: Vorheizregister"
        entity_category: diagnostic
      - name: "Relais: Netzrelais Bypass"
        entity_category: diagnostic
      - name: "Relais: Bedienteil aktiv"
        entity_category: diagnostic
      - name: "Relais: Bedienung via RSSchnittstelle"
        entity_category: diagnostic
      - name: "Relais: Luftstufe Vorhanden"
        entity_category: diagnostic
      - name: "Relais: Warmwasser Nachheizregister"
        entity_category: diagnostic
      - name: "Relais: Magnetventil"
        entity_category: diagnostic
      - name: "Relais: Vorheizen aktiv"
        entity_category: diagnostic
      - name: "FEHLER"
        device_class: problem
        entity_category: diagnostic
      - name: "Nachheizregister ON"
        entity_category: diagnostic
      - name: "Absenkung ON"
        entity_category: diagnostic



sensor:
- platform: custom
  id: WR3223SensorConnector
  lambda: |-
    auto wr3223Sensor = new WR3223::WR3223SensorConnector();
    App.register_component(wr3223Sensor);
    return {wr3223Sensor->verdampfertemperatur_sensor, 
            wr3223Sensor->kondensatortemperatur_sensor,
            wr3223Sensor->aussentemperatur_sensor,            
            wr3223Sensor->fortlufttemperatur_sensor,
            wr3223Sensor->zulufttemperatur_sensor,
            wr3223Sensor->ewttemperatur_sensor,
            wr3223Sensor->nachvorheizregistertemperatur_sensor,
            wr3223Sensor->drehzahl_zuluft_sensor,
            wr3223Sensor->drehzahl_abluft_sensor};
  sensors:
  - name: "Temp: Verdampfer"
    unit_of_measurement: °C
    accuracy_decimals: 1
    device_class: temperature    
  - name: "Temp: Kondensator"
    unit_of_measurement: °C
    accuracy_decimals: 1
    device_class: temperature    
  - name: "Temp: Aussen"
    unit_of_measurement: °C
    accuracy_decimals: 1
    device_class: temperature      
  - name: "Temp: Nach Wärmetauscher (Fortluft)"
    unit_of_measurement: °C
    accuracy_decimals: 1
    device_class: temperature    
  - name: "Temp: Zuluft"
    unit_of_measurement: °C
    accuracy_decimals: 1
    device_class: temperature    
  - name: "Temp: nach EWT"
    unit_of_measurement: °C
    accuracy_decimals: 1
    device_class: temperature    
  - name: "Temp: Nach Vorheizregister"
    unit_of_measurement: °C
    accuracy_decimals: 1    
    device_class: temperature    
  - name: "Drehzahl: Zuluft"    
    unit_of_measurement: rpm
    state_class: measurement    
  - name: "Drehzahl: Abluft"
    unit_of_measurement: rpm
    state_class: measurement    

button:
  - platform: template
    name: Update Relais    
    icon: mdi:update
    entity_category: config    
    on_press:
      - lambda: 'static_cast<WR3223::WR3223Controller *>(wr3223Controller)->Refresh_Relais();'
  - platform: template
    name: Restore config
    icon: mdi:update
    entity_category: config
    on_press:
      - lambda: 'static_cast<WR3223::WR3223Controller *>(wr3223Controller)->Config_Restore();'
  - platform: template
    name: Save config
    icon: mdi:update
    entity_category: config    
    on_press:
      - lambda: 'static_cast<WR3223::WR3223Controller *>(wr3223Controller)->Config_Save();'

#switch:
#  - platform: template
#    name: "RefreshRelais"
#    lambda: |-
#      auto wr3223Relais = new WR3223RelaisConnector();      
#      if(wr3223Relais->zusatzheizungSensor->state){
#        return true;
#      } else {
#        return false;
#      }
#    turn_on_action:      
#      - homeassistant.service: 
#          service: Refresh_Relais
#    turn_off_action:
#      - homeassistant.service: 
#          service: Refresh_Relais

#text_sensor:
#- platform: custom
#  lambda: |-
#    auto wr3223 = new WR3223Connector(id(uart_1));
#    App.register_component(wr3223);
#    return {wr3223};
#  text_sensors:
#    id: "uart_readline"

#interval:
#  - interval: 3s    
#    then:
#      - uart.write:
#          id: uart_1
#          data: [0x04, 0x30, 0x30, 0x31, 0x31, 0x54, 0x32, 0x05]
    